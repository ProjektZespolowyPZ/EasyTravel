@page "/users/{Id:int}/EditProfile"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="page">
    <AuthorizeView>
        <Authorized Context="Auth">
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" @onreset="@HandleReset">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <label>Imię</label>
                    <InputText @bind-Value="@model.Name" class="form-control" />
                    <ValidationMessage For="@(() => model.Name)" />
                </div>
                <div class="form-row">
                    <label>Nazwisko</label>
                    <InputText @bind-Value="@model.Surname" class="form-control" />
                    <ValidationMessage For="@(() => model.Surname)" />
                </div>
                <div class="form-row">
                    <label>Email</label>
                    <InputText @bind-Value="@model.Email" class="form-control" />
                    <ValidationMessage For="@(() => model.Email)" />
                </div>
                <div class="form-row">
                    <label>Numer telefonu</label>
                    <InputText @bind-Value="@model.PhoneNumber" class="form-control" />
                    <ValidationMessage For="@(() => model.PhoneNumber)" />
                </div>
                <br />
                <div>
                    <h6>Awatar:</h6>
                @if (model.ProfilePicture != "")
                {
                    <div>
                        <img src="@model.ProfilePicture" style="display: block; max-width: 550px; height: auto;" />
                    </div>
                }
                <InputFile OnChange="@HandleSelected" />
                </div>
                <br /><br />
                <button type="submit" class="btn btn-primary">Zatwierdź</button>
                <button type="reset" class="btn btn-danger">Wyczyść</button>
                <a class="btn btn-info" href="skillPosts">Powrót</a>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private UserInformationVm userInformation;
    public string FileUrl { get; set; }
    public string FileType { get; set; }
    EditProfileForm model = new EditProfileForm();
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        userInformation = await Http.GetFromJsonAsync<UserInformationVm>($"api/users/GetAllInformation");
        model.Id = userInformation.Id;
        model.Name = userInformation.Name;
        model.Surname = userInformation.Surname;
        model.ProfilePicture = userInformation.ProfilePicture;
        model.Email = userInformation.Email;
        model.PhoneNumber = userInformation.PhoneNumber;
        FileUrl = model.ProfilePicture;
        editContext = new EditContext(model);
    }

    private async void HandleValidSubmit()
    {
        var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PutAsync($"api/users/update-profile", content);
        Navigation.NavigateTo("/users/GetUserInformation");
    }

    private void HandleReset()
    {
        model = new EditProfileForm();
        editContext = new EditContext(model);
        FileUrl = null;
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        FileType = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileType, file.Name);
            var response = await Http.PostAsync("api/upload/avatar", content);
            FileUrl = await response.Content.ReadAsStringAsync();
            model.ProfilePicture = FileUrl;
        }
    }
}
