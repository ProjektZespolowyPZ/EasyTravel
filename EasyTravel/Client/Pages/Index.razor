@page "/"
@page "/searching/{SearchWord}"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
<div>
    <AuthorizeView>
        <Authorized Context="Auth">
            <br/>
            <h1>Strona główna</h1>
            <hr/>
            <a class="link" href="/tours/CreateTour"><div class="addTour"><i class="far fa-plus-square fa-2x"></i><h5>Dodaj wycieczkę</h5></div></a>
            <div class="panel-full">
                @foreach (var item in tours.Tours)
                {

                    <div class="background" @onclick="() => GoToDetails(item.Id)">
                        <div class="centered">@item.TourName</div>
                        @if (item.MainPhoto != "")
                        {

                            <img src="@item.MainPhoto" style="width:100%;height:100%; background-position:center; background-size:cover;" />

                        }
                    </div>
                    <br />

                    <br />
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <p>Strona główna, wyświetlająca się przed zalogowaniem</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public string SearchWord
    {
        get { return searchWord; }
        set 
        { 
            searchWord = value;
            GetSearchedTours();
        } 
    }
    private string searchWord;
    public ToursVm tours { get; set; } = new ToursVm();

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isAuthenticated)
        {
            tours = await Http.GetFromJsonAsync<ToursVm>("api/tours");
            tours.Tours.Reverse();
            StateHasChanged();
        }
    }

    private async void GetSearchedTours()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isAuthenticated)
        {
            if (SearchWord != null)
            {
                tours = await Http.GetFromJsonAsync<ToursVm>($"api/tours/searching/{SearchWord}");
            }
            else
            {
                tours = await Http.GetFromJsonAsync<ToursVm>("api/tours");
            }
            tours.Tours.Reverse();
            StateHasChanged();
        }
    }


    public void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/tours/{id}");
    }
}
<style>
    body {
    }

    div {
        display: block;
    }

    .panel-full {
        display: flex;
        flex-wrap: wrap;
    }

    .background {
        position: relative;
        text-align: center;
        color: white;
        width: 33%;
        opacity: 0.75;
    }

        .background:hover {
            opacity: 1;
        }

    .centered {
        font-weight: 700;
        font-size: 24px;
        line-height: 40px;
        position: absolute;
        z-index: 2;
        bottom: 0;
        left: 50%;
        min-width: 180px;
        height: 40px;
        -webkit-transform: translateX(-50%);
        transform: translateX(-50%);
        text-align: center;
        color: white;
        font-family: cursive;
        background: #594ae2ff;
    }
   
    .addTour h5, .addTour i{
            display: inline-block;
            vertical-align: middle;
            margin: 10px;
    }

</style>

