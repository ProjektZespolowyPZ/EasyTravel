@page "/"
@page "/searching/{SearchWord}"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
<div>
    <AuthorizeView>
        <Authorized Context="Auth">
            <br/>
            <h1>Strona główna</h1>
            <hr/>
            <a class="link" href="/tours/CreateTour"><div class="addTour"><i class="far fa-plus-square fa-2x"></i><h5>Dodaj wycieczkę</h5></div></a>
            <div class="panel-full">
                @foreach (var item in tours.Tours)
                {

                    <div @onclick="() => GoToDetails(item.Id)">
                       
                        @if (item.MainPhoto != "")
                        {
                            <div class="background">
                                <img src="@item.MainPhoto" />
                                <div class="name">@item.TourName</div>
                            </div>
                        }
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <p>Strona główna, wyświetlająca się przed zalogowaniem</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public string SearchWord
    {
        get { return searchWord; }
        set 
        { 
            searchWord = value;
            GetSearchedTours();
        } 
    }
    private string searchWord;
    public ToursVm tours { get; set; } = new ToursVm();

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isAuthenticated)
        {
            tours = await Http.GetFromJsonAsync<ToursVm>("api/tours");
            tours.Tours.Reverse();
            StateHasChanged();
        }
    }

    private async void GetSearchedTours()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isAuthenticated)
        {
            if (SearchWord != null)
            {
                tours = await Http.GetFromJsonAsync<ToursVm>($"api/tours/searching/{SearchWord}");
            }
            else
            {
                tours = await Http.GetFromJsonAsync<ToursVm>("api/tours");
            }
            tours.Tours.Reverse();
            StateHasChanged();
        }
    }


    public void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/tours/{id}");
    }
}
<style>
   
    .addTour h5, .addTour i{
            display: inline-block;
            vertical-align: middle;
            margin: 10px;
    }

</style>

