@page "/users/GetUserInformation"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers

@inject NavigationManager NavigationManager

@inject HttpClient Http

<div class="page">
    <AuthorizeView>
        <Authorized Context="Auth">
            @if (user == null)
            {
                <p>Wczytywanie...</p>
            }
            else
            {
                <div class="border">
                    <div class="left">
                        <h3>Twój awatar</h3>
                        @if (user.ProfilePicture != "")
                        {
                            <div>
                                <img class="avatar-img" src="@user.ProfilePicture"/>
                            </div>
                              

                        }
                        <div class="changeAvatar">
                            <div class="zmiana">
                                <h6>Zmiana awatara</h6>
                            </div>
                            <div class="chooseFile">
                                <InputFile OnChange="@HandleSelected" />
                            </div>
                        </div>
                    </div>
                    <div class="right" style="">
                        <h3>Dane konta</h3>
                        <button type="button" class="bnt bchange" @onclick="ShowHideEdit">@text</button>
                        @if (!Edit)
                        {
                            <h6>Imię </h6>
                            <div class="form-row form-control" style="padding:5px;">
                                <label>@user.Name</label>
                            </div>

                            <h6>Nazwisko </h6>
                            <div class="form-row form-control" style="padding: 5px;">
                                <label>@user.Surname</label>

                            </div>

                            <h6>E-Mail </h6>
                            <div class="form-row form-control" style="padding: 5px;">
                                <label>@user.Email</label>

                            </div>

                            <h6>Numer Telefonu </h6>
                            <div class="form-row form-control" style="padding: 5px;">
                                <label>@user.PhoneNumber</label>

                            </div>  
                            <br>
                            <h6 class="info">Konto założone dnia: @user.RegistrationDate</h6>
                        }
                        else
                        {
                            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" @onreset="@HandleReset">
                                <DataAnnotationsValidator />
                                <div class="form-row">
                                    <label>Imię</label>
                                    <InputText @bind-Value="@model.Name" class="form-control" />
                                    <ValidationMessage For="@(() => model.Name)" />
                                </div>
                                <div class="form-row">
                                    <label>Nazwisko</label>
                                    <InputText @bind-Value="@model.Surname" class="form-control" />
                                    <ValidationMessage For="@(() => model.Surname)" />
                                </div>
                                <div class="form-row">
                                    <label>Email</label>
                                    <InputText @bind-Value="@model.Email" class="form-control" />
                                    <ValidationMessage For="@(() => model.Email)" />
                                </div>
                                <div class="form-row">
                                    <label>Numer telefonu</label>
                                    <InputText @bind-Value="@model.PhoneNumber" class="form-control" />
                                    <ValidationMessage For="@(() => model.PhoneNumber)" />
                                </div>
                                <br /><br />
                                <button type="submit" class="btn btn-primary">Zatwierdź</button>
                                <button type="reset" class="btn btn-danger">Wyczyść</button>
                            </EditForm>
                        }
                    </div> 
                </div>
                <br/><br/>
                
                    <div class="panel-full">
                        @foreach (var item in user.UserTours)
                        {

                            <div class="background" @onclick="() => GoToDetails(item.Id)">
                                <div class="centered">@item.TourName</div>
                                @if (item.MainPhoto != "")
                                {

                                    <img src="@item.MainPhoto" style="width:100%;height:100%; background-position:center; background-size:cover;" />

                                }
                            </div>
                        }
                    </div>
                
                    
            }
        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>
@code {
    private UserInformationVm user;
    EditProfileForm model = new EditProfileForm();
    public string FileUrl { get; set; }
    public string FileType { get; set; }
    UpdateAvatar model1 = new UpdateAvatar();
    public string text { get; set; } = "Zmień";
    public bool Edit { get; set; } = false;
    private EditContext editContext;


    protected override async Task OnInitializedAsync()
    {
        user = await Http.GetFromJsonAsync<UserInformationVm>($"api/users/GetAllInformation");
        user.UserTours.Reverse();
        model.Id = user.Id;
        model.Name = user.Name;
        model.Surname = user.Surname;
        model.ProfilePicture = user.ProfilePicture;
        model.Email = user.Email;
        model.PhoneNumber = user.PhoneNumber;
        FileUrl = model.ProfilePicture;
        editContext = new EditContext(model);
    }

    private async void HandleValidSubmit()
    {
        var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PutAsync($"api/users/update-profile", content);
        Edit = !Edit;
        text = "Zmień";
        user = await Http.GetFromJsonAsync<UserInformationVm>($"api/users/GetAllInformation");
        StateHasChanged();
    }

    private void HandleReset()
    {
        model = new EditProfileForm();
        editContext = new EditContext(model);
        FileUrl = null;
    }


    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        FileType = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileType, file.Name);
            var response = await Http.PostAsync("api/upload/avatar", content);
            FileUrl = await response.Content.ReadAsStringAsync();
            user.ProfilePicture = FileUrl;

            model1.Id = user.Id;
            model1.Avatar = user.ProfilePicture;
            var modelJson = JsonSerializer.Serialize(model1, new JsonSerializerOptions { WriteIndented = true });
            var content1 = new StringContent(modelJson, Encoding.UTF8, "application/json");
            await Http.PutAsync("api/users/update-avatar", content1);
        }
    }

    private void ShowHideEdit()
    {
        Edit = !Edit;
        if(Edit)
        {
            text = "Pokaż profil";
        }
        else
        {
            text = "Zmień";
        }
        
    }

    public void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/tours/{id}");
    }
}

