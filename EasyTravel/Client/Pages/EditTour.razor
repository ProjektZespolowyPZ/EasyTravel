@page "/tours/EditTour/{Id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using System.Globalization

<div class="page" style="padding: 10px;">
    <AuthorizeView>
        <Authorized Context="Auth">
            <h3>CreateTour</h3>
            @if(tour == null)
            {
                <p>Wczytywanie...</p>
            }
            else
            {
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" @onreset="@HandleReset">
                <DataAnnotationsValidator />
                <div class="section1">
                    <div class="form-row">
                        <label>Nazwa wycieczki</label>
                        <InputText @bind-Value="@model.Name" class="form-control" />
                        <ValidationMessage For="@(() => model.Name)" />
                    </div>
                    <div class="form-row">
                        <label>Opis</label>
                        <InputTextArea @bind-Value="@model.Description" class="form-control" />
                        <ValidationMessage For="@(() => model.Description)" />
                    </div>
                    <div class="form-row">
                        <label>Miejsce spotkania</label>
                        <InputText @bind-Value="@model.MeetingPlace" class="form-control" />
                        <ValidationMessage For="@(() => model.MeetingPlace)" />
                    </div>
                    <div class="form-row">
                        <label>Miejsce zakończenia wycieczki</label>
                        <InputText @bind-Value="@model.EndPlace" class="form-control" />
                        <ValidationMessage For="@(() => model.EndPlace)" />
                    </div>
                    <div class="form-row">
                        <label>Długość trwania wycieczki</label>
                        <InputText @bind-Value="@model.Length" class="form-control" />
                        <ValidationMessage For="@(() => model.Length)" />
                    </div>
                    <br />
                </div>
                <div class="section2">
                    <div>
                        <div class="section2Heading"><i class="far fa-image fa-3x"></i><h5>Zdjęcie główne</h5></div>
                        <p>Prześlij główne zdjęcie reprezentujące twoją wycieczkę (będzie się ono wyświetlać na stronie głównej):</p>
                        @if (model.MainPhoto != "")
                        {
                            <div>
                                    <div><button class="btn btn-danger" @onclick="DeleteMainPhoto">Usuń zdjęcie główne</button></div>
                                    <br/>
                                    <div><img src="@model.MainPhoto" style="display: block; max-width: 350px; height: auto;" /></div>
                            </div>
                        }
                        <InputFile OnChange="@HandleSelectedMainPhotoTour" />
                        <ValidationMessage For="@(() => model.MainPhoto)" />
                    </div>
                    <hr />
                    <div>
                        <div class="section2Heading"><i class="far fa-map fa-3x"></i><h5>Trasa</h5></div>
                            
                        <p>Prześlij zdjęcie mapki, z zaznaczaniem trasy według której będzie przebiegać wycieczka</p>
                        @if (model.MapPhoto != "")
                        {
                            <div>
                                <div><button class="btn btn-danger" @onclick="DeleteMap">Usuń trasę</button></div>
                                <br/>
                                <div><img src="@model.MapPhoto" style="display: block; max-width: 350px; height: auto;" /></div>
                            </div>
                        }
                        <InputFile OnChange="@HandleSelectedMapPhoto" />
                    </div>
                    <hr />
                    <div>
                        <div class="section2Heading"><i class="far fa-images fa-3x"></i><h5>Zdjęcia dodatkowe</h5></div>
                        <p>Miejsce na dodatkowe zdjęcia</p>
                        
                        @foreach (var item in AdditionalPhotos)
                        {
                            @if (item.TourPhoto != "")
                            {
                                <div>
                                    <div><button class="btn btn-danger" @onclick="() => DeleteAdditionalPhoto(item)">Usuń zdjęcie</button></div>
                                    <br/>
                                    <div><img src="@item.TourPhoto" style="display: block; max-width: 350px; height: auto;" /></div>
                                </div>
                            }
                            <InputFile OnChange="@HandleSelectedAdditionalPhoto" />
                        }
                        <br/>
                    </div>
                    <hr />
                    <div>
                        <input id="AddButton" type="button" class="btn btn-warning" value="Dodaj termin wycieczki" @onclick="AddTerm" />
                        <h6 style="color: red">@ValidateTerms</h6>
                        @if (Terms.Count() != 0)
                        {
                            @foreach (var item in Terms)
                            {
                                <br />
                                    <button class="btn btn-danger" @onclick="() => DeleteTerm(item)">Usuń termin</button>
                                <div class="form-group">
                                    <div class="section2Heading"><i class="far fa-calendar alt fa-3x"></i><h5><label for="createdDate">Data planowanej wycieczki</label></h5></div>
                                    <InputDateTime id="termTour" class="form-control col-sm-8" @bind-Value="@item.TourDate"></InputDateTime>
                                    <ValidationMessage For="@(() => item.TourDate)" />
                                </div>
                                <div class="section2Heading"><i class="fas fa-money-bill fa-3x"></i><h5><label>Cena</label></h5></div>
                                <input type="number" step="0.01" @bind-value="@item.Price" />
                                @if (item.Price < 0)
                                {
                                    <p style="color: red">Cena nie może być ujemna.</p>
                                }
                                <br />
                                <hr />
                                <div class="section2Heading"><i class="fas fa-lock fa-3x"></i><h5><label>Hasło</label></h5></div>
                                <div class="form-row">
                                    <p><label>Wpisz hasło, które przekażesz uczestnikom wycieczki, aby mogli Cię ocenić</label></p>
                                    <InputText @bind-Value="@item.Password" class="form-control" />
                                    <ValidationMessage For="@(() => item.Password)" />
                                </div>
                            }

                        }
                    </div>
                    <hr />
                    <div>
                        <div class="section2Heading"><i class="fas fa-tag fa-3x"></i><h5><label for="createdDate">Tagi</label></h5></div>
                        <p>Aby użytkownicy mogli wyszuakć Twoją wycieczkę dodaj tagi, po których Twoja wycieczka będzie szukana.<br /> Może to być np. miasto, w którym odbywa się wycieczka itd. Nie musisz poprzedzać tagu #.</p>
                        <input id="AddButtonTag" type="button" class="btn btn-warning" value="Dodaj tag do wycieczki" @onclick="AddTag" />
                        <h6 style="color: red">@ValidateTags</h6>
                        @if (Tags.Count() != 0)
                        {
                            @foreach (var item in Tags)
                            {
                                    <button class="btn btn-danger" @onclick="() => DeleteTag(item)">Usuń tag</button>
                                <div class="section2Heading"><i class="fas fa-hashtag fa-3x"></i><h5><label>Tag</label></h5></div>
                                <div class="form-row">
                                    <InputText @bind-Value="@item.Tag" class="form-control" />
                                </div>
                            }

                        }

                    </div>
                    <br /><br />
                    <button type="submit" class="btn btn-primary">Zatwierdź</button>
                    <button type="reset" class="btn btn-danger">Wyczyść</button>
                    <a class="btn btn-info" href="/">Powrót</a>
                </div>










            </EditForm>
            }
        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    public string FileUrlMain { get; set; } = "";
    public string FileTypeMain { get; set; }
    public string FileUrlMap { get; set; } = "";
    public string FileTypeMap { get; set; }
    public string FileTypeAdditionalPhoto { get; set; }
    public EditTourForm model = new EditTourForm();
    public TourVm tour;
    public EditContext editContext;
    public List<TourDateDTO> Terms = new List<TourDateDTO>();
    public List<TourTagDTO> Tags = new List<TourTagDTO>();
    public List<TourPhotoDTO> AdditionalPhotos = new List<TourPhotoDTO>();
    public string ValidateTerms = "";
    public string ValidateTags = "";
    public bool TermsEmpty { get; set; } = false;

    protected async override void OnInitialized()
    {
        tour = await Http.GetFromJsonAsync<TourVm>($"api/tours/{Id}");
        model.Id = tour.Id;
        model.Name = tour.TourName;
        model.Description = tour.Description;
        model.MeetingPlace = tour.MeetingPlace;
        model.EndPlace = tour.EndPlace;
        model.Length = tour.Length;
        model.MainPhoto = tour.MainPhoto;
        model.MapPhoto = tour.MapPhoto;
        foreach (var item in tour.TourPhotos)
        {
            AdditionalPhotos.Add(item);
        }
        foreach (var item in tour.TourDates)
        {
            if(item.TourDate > DateTime.Now)
            {
                Terms.Add(item);
            }
        }
        foreach (var item in tour.TourTags)
        {
            Tags.Add(item);
        }
        editContext = new EditContext(model);
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        if (Terms.Count == 0) TermsEmpty = true;
        else TermsEmpty = false;
        Terms = Terms.Where(a => a.TourDate > DateTime.Now && a.Price >= 0.00f && a.Password != null).ToList();
        Tags = Tags.Where(a => a.Tag != "").ToList();
        model.TourDates = Terms;
        model.TourPhotos = AdditionalPhotos;
        model.TourTags = Tags;
        if ((TermsEmpty || Terms.Count != 0) && (Tags.Count != 0))
        {
            ValidateTerms = "";
            ValidateTags = "";
            var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
            var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
            await Http.PutAsync("api/tours/edit-tour", content);
            Navigation.NavigateTo($"/tours/{Id}");
        }
        else if (Tags.Count == 0)
        {
            ValidateTags = "Proszę podać przynajmniej jeden tag.";
        }
        else if (Terms.Count == 0)
        {
            ValidateTerms = "Proszę podać przynajmniej jeden termin.";
        } 
    }

    private void HandleReset()
    {
        model = new EditTourForm();
        editContext = new EditContext(model);
        FileUrlMain = "";
    }

    private async Task HandleSelectedMainPhotoTour(InputFileChangeEventArgs e)
    {
        FileUrlMain = "";
        var file = e.File;
        FileTypeMain = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileTypeMain, file.Name);
            var response = await Http.PostAsync("api/upload/tour", content);
            FileUrlMain = await response.Content.ReadAsStringAsync();
            model.MainPhoto = FileUrlMain;
        }
    }

    private async Task HandleSelectedMapPhoto(InputFileChangeEventArgs e)
    {
        FileUrlMap = "";
        var file = e.File;
        FileTypeMap = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileTypeMap, file.Name);
            var response = await Http.PostAsync("api/upload/tour", content);
            FileUrlMap = await response.Content.ReadAsStringAsync();
            model.MapPhoto = FileUrlMap;
        }
    }

    private async Task HandleSelectedAdditionalPhoto(InputFileChangeEventArgs e)
    {
        var file = e.File;
        FileTypeAdditionalPhoto = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileTypeAdditionalPhoto, file.Name);
            var response = await Http.PostAsync("api/upload/tour", content);
            string photoUrl = await response.Content.ReadAsStringAsync();
            TourPhotoDTO tp = new TourPhotoDTO();
            tp.TourPhoto = photoUrl;
            AdditionalPhotos.Add(tp);
            StateHasChanged();
        }
    }

    private void AddTerm()
    {
        TourDateDTO t = new TourDateDTO();

        t.TourDate = DateTime.Now;
        t.Price = 0.00f;
        Terms.Add(t);
        for (int i = 0; i < Terms.Count(); i++)
        {
            Console.WriteLine(Terms[i].TourDate + "  " + Terms[i].Price);
        }
        Console.WriteLine(Terms.Count);
        StateHasChanged();
    }

    private void AddTag()
    {
        TourTagDTO t = new TourTagDTO();
        t.Tag = "";
        Tags.Add(t);
        StateHasChanged();
    }

    private void DeleteMainPhoto()
    {
        model.MainPhoto = "";
    }

    private void DeleteMap()
    {
        model.MapPhoto = "";
    }

    private async void DeleteAdditionalPhoto(TourPhotoDTO photo)
    {
        AdditionalPhotos.Remove(photo);
        await Http.DeleteAsync($"api/tours/tour-photos/{photo.Id}");
        StateHasChanged();
    }

    private async void DeleteTerm(TourDateDTO term)
    {
        Terms.Remove(term);
        await Http.DeleteAsync($"api/tours/tour-dates/{term.Id}");
        StateHasChanged();
    }

    private async void DeleteTag(TourTagDTO tag)
    {
        Tags.Remove(tag);
        await Http.DeleteAsync($"api/tours/tour-tags/{tag.Id}");
        StateHasChanged();
    }
}
